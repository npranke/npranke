"""
This type stub file was generated by pyright.
"""

DENY = ...
SAMEORIGIN = ...
ALLOW_FROM = ...
ONE_YEAR_IN_SECS = ...
DEFAULT_REFERRER_POLICY = ...
DEFAULT_CSP_POLICY = ...
DEFAULT_SESSION_COOKIE_SAMESITE = ...
GOOGLE_CSP_POLICY = ...
DEFAULT_PERMISSIONS_POLICY = ...
DEFAULT_DOCUMENT_POLICY = ...
DEFAULT_FEATURE_POLICY = ...
NONCE_LENGTH = ...
class Talisman:
    """
    Talisman is a Flask extension for HTTP security headers.
    """
    def __init__(self, app=..., **kwargs) -> None:
        ...
    
    def init_app(self, app, feature_policy=..., permissions_policy=..., document_policy=..., force_https=..., force_https_permanent=..., force_file_save=..., frame_options=..., frame_options_allow_from=..., strict_transport_security=..., strict_transport_security_preload=..., strict_transport_security_max_age=..., strict_transport_security_include_subdomains=..., content_security_policy=..., content_security_policy_report_uri=..., content_security_policy_report_only=..., content_security_policy_nonce_in=..., referrer_policy=..., session_cookie_secure=..., session_cookie_http_only=..., session_cookie_samesite=..., x_content_type_options=..., x_xss_protection=...): # -> None:
        """
        Initialization.

        Args:
            app: A Flask application.
            feature_policy: A string or dictionary describing the
                feature policy for the response.
            permissions_policy: A string or dictionary describing the
                permissions policy for the response.
            document_policy: A string or dictionary describing the
                document policy for the response.
            force_https: Redirects non-http requests to https, disabled in
                debug mode.
            force_https_permanent: Uses 301 instead of 302 redirects.
            frame_options: Sets the X-Frame-Options header, defaults to
                SAMEORIGIN.
            frame_options_allow_from: Used when frame_options is set to
                ALLOW_FROM and is a string of domains to allow frame embedding.
            strict_transport_security: Sets HSTS headers.
            strict_transport_security_preload: Enables HSTS preload. See
                https://hstspreload.org.
            strict_transport_security_max_age: How long HSTS headers are
                honored by the browser.
            strict_transport_security_include_subdomains: Whether to include
                all subdomains when setting HSTS.
            content_security_policy: A string or dictionary describing the
                content security policy for the response.
            content_security_policy_report_uri: A string indicating the report
                URI used for CSP violation reports
            content_security_policy_report_only: Whether to set the CSP header
                as "report-only", which disables the enforcement by the browser
                and requires a "report-uri" parameter with a backend to receive
                the POST data
            content_security_policy_nonce_in: A list of csp sections to include
                a per-request nonce value in
            referrer_policy: A string describing the referrer policy for the
                response.
            session_cookie_secure: Forces the session cookie to only be sent
                over https. Disabled in debug mode.
            session_cookie_http_only: Prevents JavaScript from reading the
                session cookie.
            session_cookie_samesite: Sets samesite parameter on session cookie
            force_file_save: Prevents the user from opening a file download
                directly on >= IE 8
            x_content_type_options: Prevents MIME type sniffing
            x_xss_protection: Prevents the page from loading when the browser
                detects reflected cross-site scripting attacks

        See README.rst for a detailed description of each option.
        """
        ...
    
    def __call__(self, **kwargs): # -> (f: Unknown) -> Unknown:
        """Use talisman as a decorator to configure options for a particular
        view.

        Only force_https, frame_options, frame_options_allow_from,
        content_security_policy, content_security_policy_nonce_in
        and feature_policy can be set on a per-view basis.

        Example:

            app = Flask(__name__)
            talisman = Talisman(app)

            @app.route('/normal')
            def normal():
                return 'Normal'

            @app.route('/embeddable')
            @talisman(frame_options=ALLOW_FROM, frame_options_allow_from='*')
            def embeddable():
                return 'Embeddable'
        """
        ...
    


def get_random_string(length): # -> str:
    ...

